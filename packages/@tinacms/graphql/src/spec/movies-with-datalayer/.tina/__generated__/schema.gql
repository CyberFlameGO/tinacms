"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  documentConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
  movie(relativePath: String): Movie!
  movieConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: MovieFilter): MovieConnection!
  director(relativePath: String): Director!
  directorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: DirectorFilter): DirectorConnection!
  crew(relativePath: String): Crew!
  crewConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CrewFilter): CrewConnection!
  actor(relativePath: String): Actor!
  actorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ActorFilter): ActorConnection!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input DirectorFilter {
  name: StringFilter
}

input MovieDirectorFilter {
  director: DirectorFilter
}

input MovieFilter {
  title: StringFilter
  releaseDate: DatetimeFilter
  rating: NumberFilter
  archived: BooleanFilter
  genre: StringFilter
  director: MovieDirectorFilter
  body: StringFilter
}

input CrewCostumeDesignerFilter {
  favoriteColor: StringFilter
}

input CrewStuntPersonFilter {
  bestMove: StringFilter
}

input CrewFilter {
  costumeDesigner: CrewCostumeDesignerFilter
  stuntPerson: CrewStuntPersonFilter
}

input ActorFilter {
  name: StringFilter
  body: StringFilter
}

input DocumentFilter {
  movie: MovieFilter
  director: DirectorFilter
  crew: CrewFilter
  actor: ActorFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Movie | Director | CrewCostumeDesigner | CrewStuntPerson | Actor

union MovieDirector = Director

type Movie implements Node & Document {
  title: String
  releaseDate: String
  rating: Float!
  archived: Boolean
  genre: String
  director: MovieDirector
  body: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type MovieConnectionEdges {
  cursor: String!
  node: Movie
}

type MovieConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MovieConnectionEdges]
}

type Director implements Node & Document {
  name: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type DirectorConnectionEdges {
  cursor: String!
  node: Director
}

type DirectorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DirectorConnectionEdges]
}

type CrewCostumeDesigner implements Node & Document {
  favoriteColor: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type CrewStuntPerson implements Node & Document {
  bestMove: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Crew = CrewCostumeDesigner | CrewStuntPerson

type CrewConnectionEdges {
  cursor: String!
  node: Crew
}

type CrewConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CrewConnectionEdges]
}

type Actor implements Node & Document {
  name: String
  body: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type ActorConnectionEdges {
  cursor: String!
  node: Actor
}

type ActorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ActorConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateMovie(relativePath: String!, params: MovieMutation!): Movie!
  createMovie(relativePath: String!, params: MovieMutation!): Movie!
  updateDirector(relativePath: String!, params: DirectorMutation!): Director!
  createDirector(relativePath: String!, params: DirectorMutation!): Director!
  updateCrew(relativePath: String!, params: CrewMutation!): Crew!
  createCrew(relativePath: String!, params: CrewMutation!): Crew!
  updateActor(relativePath: String!, params: ActorMutation!): Actor!
  createActor(relativePath: String!, params: ActorMutation!): Actor!
}

input DocumentMutation {
  movie: MovieMutation
  director: DirectorMutation
  crew: CrewMutation
  actor: ActorMutation
}

input MovieMutation {
  title: String
  releaseDate: String
  rating: Float
  archived: Boolean
  genre: String
  director: String
  body: String
}

input DirectorMutation {
  name: String
}

input CrewCostumeDesignerMutation {
  favoriteColor: String
}

input CrewStuntPersonMutation {
  bestMove: String
}

input CrewMutation {
  costumeDesigner: CrewCostumeDesignerMutation
  stuntPerson: CrewStuntPersonMutation
}

input ActorMutation {
  name: String
  body: String
}
