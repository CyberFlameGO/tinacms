//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from 'tinacms';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: Maybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  documentConnection: DocumentConnection;
  localeInfo: LocaleInfo;
  localeInfoConnection: LocaleInfoConnection;
  news: News;
  newsConnection: NewsConnection;
  footer: Footer;
  footerConnection: FooterConnection;
  theme: Theme;
  themeConnection: ThemeConnection;
  navigation: Navigation;
  navigationConnection: NavigationConnection;
  page: Page;
  pageConnection: PageConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: Maybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: Maybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: Maybe<Scalars['String']>;
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryDocumentConnectionArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Float']>;
  last?: Maybe<Scalars['Float']>;
  sort?: Maybe<Scalars['String']>;
};


export type QueryLocaleInfoArgs = {
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryLocaleInfoConnectionArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Float']>;
  last?: Maybe<Scalars['Float']>;
  sort?: Maybe<Scalars['String']>;
};


export type QueryNewsArgs = {
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryNewsConnectionArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Float']>;
  last?: Maybe<Scalars['Float']>;
  sort?: Maybe<Scalars['String']>;
};


export type QueryFooterArgs = {
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryFooterConnectionArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Float']>;
  last?: Maybe<Scalars['Float']>;
  sort?: Maybe<Scalars['String']>;
};


export type QueryThemeArgs = {
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryThemeConnectionArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Float']>;
  last?: Maybe<Scalars['Float']>;
  sort?: Maybe<Scalars['String']>;
};


export type QueryNavigationArgs = {
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryNavigationConnectionArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Float']>;
  last?: Maybe<Scalars['Float']>;
  sort?: Maybe<Scalars['String']>;
};


export type QueryPageArgs = {
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryPageConnectionArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Float']>;
  last?: Maybe<Scalars['Float']>;
  sort?: Maybe<Scalars['String']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Float']>;
  last?: Maybe<Scalars['Float']>;
  sort?: Maybe<Scalars['String']>;
};

export type DocumentNode = LocaleInfo | News | Footer | Theme | Navigation | Page;

export type LocaleInfoAu = {
  __typename?: 'LocaleInfoAu';
  tel?: Maybe<Scalars['String']>;
  signUpLink?: Maybe<Scalars['String']>;
  signUpLinkPersonal?: Maybe<Scalars['String']>;
  signInLink?: Maybe<Scalars['String']>;
};

export type LocaleInfoUs = {
  __typename?: 'LocaleInfoUs';
  tel?: Maybe<Scalars['String']>;
  signUpLink?: Maybe<Scalars['String']>;
  signUpLinkPersonal?: Maybe<Scalars['String']>;
  signInLink?: Maybe<Scalars['String']>;
};

export type LocaleInfoGb = {
  __typename?: 'LocaleInfoGb';
  tel?: Maybe<Scalars['String']>;
  signUpLink?: Maybe<Scalars['String']>;
  signUpLinkPersonal?: Maybe<Scalars['String']>;
  signInLink?: Maybe<Scalars['String']>;
};

export type LocaleInfo = Node & Document & {
  __typename?: 'LocaleInfo';
  au?: Maybe<LocaleInfoAu>;
  us?: Maybe<LocaleInfoUs>;
  gb?: Maybe<LocaleInfoGb>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type LocaleInfoConnectionEdges = {
  __typename?: 'LocaleInfoConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<LocaleInfo>;
};

export type LocaleInfoConnection = Connection & {
  __typename?: 'LocaleInfoConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<LocaleInfoConnectionEdges>>>;
};

export type News = Node & Document & {
  __typename?: 'News';
  title: Scalars['String'];
  subTitle?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  publishDate?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type NewsConnectionEdges = {
  __typename?: 'NewsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<News>;
};

export type NewsConnection = Connection & {
  __typename?: 'NewsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<NewsConnectionEdges>>>;
};

export type FooterOffices = {
  __typename?: 'FooterOffices';
  location: Scalars['String'];
  address: Scalars['String'];
  phone: Scalars['String'];
};

export type FooterDisclaimers = {
  __typename?: 'FooterDisclaimers';
  body?: Maybe<Scalars['JSON']>;
};

export type Footer = Node & Document & {
  __typename?: 'Footer';
  offices?: Maybe<Array<Maybe<FooterOffices>>>;
  disclaimers: Array<FooterDisclaimers>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type FooterConnectionEdges = {
  __typename?: 'FooterConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Footer>;
};

export type FooterConnection = Connection & {
  __typename?: 'FooterConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<FooterConnectionEdges>>>;
};

export type Theme = Node & Document & {
  __typename?: 'Theme';
  displayFont?: Maybe<Scalars['String']>;
  colorMode?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type ThemeConnectionEdges = {
  __typename?: 'ThemeConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Theme>;
};

export type ThemeConnection = Connection & {
  __typename?: 'ThemeConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ThemeConnectionEdges>>>;
};

export type NavigationItemsPage = Page;

export type NavigationItems = {
  __typename?: 'NavigationItems';
  page?: Maybe<NavigationItemsPage>;
};

export type Navigation = Node & Document & {
  __typename?: 'Navigation';
  items: Array<NavigationItems>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type NavigationConnectionEdges = {
  __typename?: 'NavigationConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Navigation>;
};

export type NavigationConnection = Connection & {
  __typename?: 'NavigationConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<NavigationConnectionEdges>>>;
};

export type PageSeo = {
  __typename?: 'PageSeo';
  title?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  description: Scalars['String'];
};

export type PageBlocksNewsNewsItemsArticle = News;

export type PageBlocksNewsNewsItems = {
  __typename?: 'PageBlocksNewsNewsItems';
  article: PageBlocksNewsNewsItemsArticle;
};

export type PageBlocksNews = {
  __typename?: 'PageBlocksNews';
  title: Scalars['String'];
  subTitle?: Maybe<Scalars['String']>;
  description: Scalars['JSON'];
  newsItems: Array<PageBlocksNewsNewsItems>;
};

export type PageBlocksStatsWithImageStats = {
  __typename?: 'PageBlocksStatsWithImageStats';
  title: Scalars['String'];
  subTitle?: Maybe<Scalars['String']>;
  description: Scalars['JSON'];
};

export type PageBlocksStatsWithImage = {
  __typename?: 'PageBlocksStatsWithImage';
  title: Scalars['String'];
  subTitle?: Maybe<Scalars['String']>;
  description: Scalars['JSON'];
  image?: Maybe<Scalars['String']>;
  stats?: Maybe<Array<Maybe<PageBlocksStatsWithImageStats>>>;
};

export type PageBlocksHeroAction = {
  __typename?: 'PageBlocksHeroAction';
  callToAction?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  linkOverride?: Maybe<Scalars['String']>;
  secondaryText?: Maybe<Scalars['String']>;
  secondaryLink?: Maybe<Scalars['String']>;
  secondaryLinkOverride?: Maybe<Scalars['String']>;
};

export type PageBlocksHero = {
  __typename?: 'PageBlocksHero';
  title: Scalars['String'];
  subTitle?: Maybe<Scalars['String']>;
  description: Scalars['JSON'];
  image?: Maybe<Scalars['String']>;
  action?: Maybe<PageBlocksHeroAction>;
};

export type PageBlocksSlideshowItemsAction = {
  __typename?: 'PageBlocksSlideshowItemsAction';
  callToAction?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  linkOverride?: Maybe<Scalars['String']>;
  secondaryText?: Maybe<Scalars['String']>;
  secondaryLink?: Maybe<Scalars['String']>;
  secondaryLinkOverride?: Maybe<Scalars['String']>;
};

export type PageBlocksSlideshowItemsOverlay = {
  __typename?: 'PageBlocksSlideshowItemsOverlay';
  image?: Maybe<Scalars['String']>;
  overlayColor?: Maybe<Scalars['String']>;
  overlayOpacity?: Maybe<Scalars['String']>;
};

export type PageBlocksSlideshowItems = {
  __typename?: 'PageBlocksSlideshowItems';
  title: Scalars['String'];
  subTitle?: Maybe<Scalars['String']>;
  description: Scalars['JSON'];
  action?: Maybe<PageBlocksSlideshowItemsAction>;
  overlay?: Maybe<PageBlocksSlideshowItemsOverlay>;
};

export type PageBlocksSlideshow = {
  __typename?: 'PageBlocksSlideshow';
  items?: Maybe<Array<Maybe<PageBlocksSlideshowItems>>>;
};

export type PageBlocksComparisonTableItemsMetaA = {
  __typename?: 'PageBlocksComparisonTableItemsMetaA';
  aOne?: Maybe<Scalars['String']>;
};

export type PageBlocksComparisonTableItemsMetaB = {
  __typename?: 'PageBlocksComparisonTableItemsMetaB';
  bOne?: Maybe<Scalars['String']>;
};

export type PageBlocksComparisonTableItemsMeta = PageBlocksComparisonTableItemsMetaA | PageBlocksComparisonTableItemsMetaB;

export type PageBlocksComparisonTableItems = {
  __typename?: 'PageBlocksComparisonTableItems';
  title: Scalars['String'];
  subTitle?: Maybe<Scalars['String']>;
  description: Scalars['JSON'];
  bulletPoints?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Array<Maybe<PageBlocksComparisonTableItemsMeta>>>;
};

export type PageBlocksComparisonTableAction = {
  __typename?: 'PageBlocksComparisonTableAction';
  callToAction?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  linkOverride?: Maybe<Scalars['String']>;
  secondaryText?: Maybe<Scalars['String']>;
  secondaryLink?: Maybe<Scalars['String']>;
  secondaryLinkOverride?: Maybe<Scalars['String']>;
};

export type PageBlocksComparisonTable = {
  __typename?: 'PageBlocksComparisonTable';
  title: Scalars['String'];
  subTitle?: Maybe<Scalars['String']>;
  description: Scalars['JSON'];
  items?: Maybe<Array<Maybe<PageBlocksComparisonTableItems>>>;
  action?: Maybe<PageBlocksComparisonTableAction>;
};

export type PageBlocksFeatureFeatures = {
  __typename?: 'PageBlocksFeatureFeatures';
  icon: Scalars['String'];
  name: Scalars['String'];
  description: Scalars['JSON'];
};

export type PageBlocksFeatureOverlay = {
  __typename?: 'PageBlocksFeatureOverlay';
  image?: Maybe<Scalars['String']>;
  overlayColor?: Maybe<Scalars['String']>;
  overlayOpacity?: Maybe<Scalars['String']>;
};

export type PageBlocksFeature = {
  __typename?: 'PageBlocksFeature';
  title: Scalars['String'];
  subTitle?: Maybe<Scalars['String']>;
  description: Scalars['JSON'];
  featureStyle?: Maybe<Scalars['String']>;
  features: Array<PageBlocksFeatureFeatures>;
  overlay?: Maybe<PageBlocksFeatureOverlay>;
};

export type PageBlocksFullScreenLogoOverlay = {
  __typename?: 'PageBlocksFullScreenLogoOverlay';
  image?: Maybe<Scalars['String']>;
  overlayColor?: Maybe<Scalars['String']>;
  overlayOpacity?: Maybe<Scalars['String']>;
};

export type PageBlocksFullScreenLogo = {
  __typename?: 'PageBlocksFullScreenLogo';
  slogan?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  overlay?: Maybe<PageBlocksFullScreenLogoOverlay>;
};

export type PageBlocksFullScreenHeaderAction = {
  __typename?: 'PageBlocksFullScreenHeaderAction';
  callToAction?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  linkOverride?: Maybe<Scalars['String']>;
  secondaryText?: Maybe<Scalars['String']>;
  secondaryLink?: Maybe<Scalars['String']>;
  secondaryLinkOverride?: Maybe<Scalars['String']>;
};

export type PageBlocksFullScreenHeaderOverlay = {
  __typename?: 'PageBlocksFullScreenHeaderOverlay';
  image?: Maybe<Scalars['String']>;
  overlayColor?: Maybe<Scalars['String']>;
  overlayOpacity?: Maybe<Scalars['String']>;
};

export type PageBlocksFullScreenHeader = {
  __typename?: 'PageBlocksFullScreenHeader';
  title: Scalars['String'];
  subTitle?: Maybe<Scalars['String']>;
  description: Scalars['JSON'];
  action?: Maybe<PageBlocksFullScreenHeaderAction>;
  overlay?: Maybe<PageBlocksFullScreenHeaderOverlay>;
};

export type PageBlocks = PageBlocksNews | PageBlocksStatsWithImage | PageBlocksHero | PageBlocksSlideshow | PageBlocksComparisonTable | PageBlocksFeature | PageBlocksFullScreenLogo | PageBlocksFullScreenHeader;

export type Page = Node & Document & {
  __typename?: 'Page';
  title: Scalars['String'];
  link: Scalars['String'];
  seo?: Maybe<PageSeo>;
  blocks?: Maybe<Array<Maybe<PageBlocks>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  createDocument: DocumentNode;
  updateLocaleInfo: LocaleInfo;
  createLocaleInfo: LocaleInfo;
  updateNews: News;
  createNews: News;
  updateFooter: Footer;
  createFooter: Footer;
  updateTheme: Theme;
  createTheme: Theme;
  updateNavigation: Navigation;
  createNavigation: Navigation;
  updatePage: Page;
  createPage: Page;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: Maybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: Maybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationCreateDocumentArgs = {
  collection?: Maybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateLocaleInfoArgs = {
  relativePath: Scalars['String'];
  params: LocaleInfoMutation;
};


export type MutationCreateLocaleInfoArgs = {
  relativePath: Scalars['String'];
  params: LocaleInfoMutation;
};


export type MutationUpdateNewsArgs = {
  relativePath: Scalars['String'];
  params: NewsMutation;
};


export type MutationCreateNewsArgs = {
  relativePath: Scalars['String'];
  params: NewsMutation;
};


export type MutationUpdateFooterArgs = {
  relativePath: Scalars['String'];
  params: FooterMutation;
};


export type MutationCreateFooterArgs = {
  relativePath: Scalars['String'];
  params: FooterMutation;
};


export type MutationUpdateThemeArgs = {
  relativePath: Scalars['String'];
  params: ThemeMutation;
};


export type MutationCreateThemeArgs = {
  relativePath: Scalars['String'];
  params: ThemeMutation;
};


export type MutationUpdateNavigationArgs = {
  relativePath: Scalars['String'];
  params: NavigationMutation;
};


export type MutationCreateNavigationArgs = {
  relativePath: Scalars['String'];
  params: NavigationMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};

export type DocumentMutation = {
  localeInfo?: Maybe<LocaleInfoMutation>;
  news?: Maybe<NewsMutation>;
  footer?: Maybe<FooterMutation>;
  theme?: Maybe<ThemeMutation>;
  navigation?: Maybe<NavigationMutation>;
  page?: Maybe<PageMutation>;
};

export type LocaleInfoAuMutation = {
  tel?: Maybe<Scalars['String']>;
  signUpLink?: Maybe<Scalars['String']>;
  signUpLinkPersonal?: Maybe<Scalars['String']>;
  signInLink?: Maybe<Scalars['String']>;
};

export type LocaleInfoUsMutation = {
  tel?: Maybe<Scalars['String']>;
  signUpLink?: Maybe<Scalars['String']>;
  signUpLinkPersonal?: Maybe<Scalars['String']>;
  signInLink?: Maybe<Scalars['String']>;
};

export type LocaleInfoGbMutation = {
  tel?: Maybe<Scalars['String']>;
  signUpLink?: Maybe<Scalars['String']>;
  signUpLinkPersonal?: Maybe<Scalars['String']>;
  signInLink?: Maybe<Scalars['String']>;
};

export type LocaleInfoMutation = {
  au?: Maybe<LocaleInfoAuMutation>;
  us?: Maybe<LocaleInfoUsMutation>;
  gb?: Maybe<LocaleInfoGbMutation>;
};

export type NewsMutation = {
  title?: Maybe<Scalars['String']>;
  subTitle?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  publishDate?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
};

export type FooterOfficesMutation = {
  location?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type FooterDisclaimersMutation = {
  body?: Maybe<Scalars['JSON']>;
};

export type FooterMutation = {
  offices?: Maybe<Array<Maybe<FooterOfficesMutation>>>;
  disclaimers?: Maybe<Array<Maybe<FooterDisclaimersMutation>>>;
};

export type ThemeMutation = {
  displayFont?: Maybe<Scalars['String']>;
  colorMode?: Maybe<Scalars['String']>;
};

export type NavigationItemsMutation = {
  page?: Maybe<Scalars['String']>;
};

export type NavigationMutation = {
  items?: Maybe<Array<Maybe<NavigationItemsMutation>>>;
};

export type PageSeoMutation = {
  title?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
};

export type PageBlocksNewsNewsItemsMutation = {
  article?: Maybe<Scalars['String']>;
};

export type PageBlocksNewsMutation = {
  title?: Maybe<Scalars['String']>;
  subTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  newsItems?: Maybe<Array<Maybe<PageBlocksNewsNewsItemsMutation>>>;
};

export type PageBlocksStatsWithImageStatsMutation = {
  title?: Maybe<Scalars['String']>;
  subTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
};

export type PageBlocksStatsWithImageMutation = {
  title?: Maybe<Scalars['String']>;
  subTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  image?: Maybe<Scalars['String']>;
  stats?: Maybe<Array<Maybe<PageBlocksStatsWithImageStatsMutation>>>;
};

export type PageBlocksHeroActionMutation = {
  callToAction?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  linkOverride?: Maybe<Scalars['String']>;
  secondaryText?: Maybe<Scalars['String']>;
  secondaryLink?: Maybe<Scalars['String']>;
  secondaryLinkOverride?: Maybe<Scalars['String']>;
};

export type PageBlocksHeroMutation = {
  title?: Maybe<Scalars['String']>;
  subTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  image?: Maybe<Scalars['String']>;
  action?: Maybe<PageBlocksHeroActionMutation>;
};

export type PageBlocksSlideshowItemsActionMutation = {
  callToAction?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  linkOverride?: Maybe<Scalars['String']>;
  secondaryText?: Maybe<Scalars['String']>;
  secondaryLink?: Maybe<Scalars['String']>;
  secondaryLinkOverride?: Maybe<Scalars['String']>;
};

export type PageBlocksSlideshowItemsOverlayMutation = {
  image?: Maybe<Scalars['String']>;
  overlayColor?: Maybe<Scalars['String']>;
  overlayOpacity?: Maybe<Scalars['String']>;
};

export type PageBlocksSlideshowItemsMutation = {
  title?: Maybe<Scalars['String']>;
  subTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  action?: Maybe<PageBlocksSlideshowItemsActionMutation>;
  overlay?: Maybe<PageBlocksSlideshowItemsOverlayMutation>;
};

export type PageBlocksSlideshowMutation = {
  items?: Maybe<Array<Maybe<PageBlocksSlideshowItemsMutation>>>;
};

export type PageBlocksComparisonTableItemsMetaAMutation = {
  aOne?: Maybe<Scalars['String']>;
};

export type PageBlocksComparisonTableItemsMetaBMutation = {
  bOne?: Maybe<Scalars['String']>;
};

export type PageBlocksComparisonTableItemsMetaMutation = {
  a?: Maybe<PageBlocksComparisonTableItemsMetaAMutation>;
  b?: Maybe<PageBlocksComparisonTableItemsMetaBMutation>;
};

export type PageBlocksComparisonTableItemsMutation = {
  title?: Maybe<Scalars['String']>;
  subTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  bulletPoints?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Array<Maybe<PageBlocksComparisonTableItemsMetaMutation>>>;
};

export type PageBlocksComparisonTableActionMutation = {
  callToAction?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  linkOverride?: Maybe<Scalars['String']>;
  secondaryText?: Maybe<Scalars['String']>;
  secondaryLink?: Maybe<Scalars['String']>;
  secondaryLinkOverride?: Maybe<Scalars['String']>;
};

export type PageBlocksComparisonTableMutation = {
  title?: Maybe<Scalars['String']>;
  subTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  items?: Maybe<Array<Maybe<PageBlocksComparisonTableItemsMutation>>>;
  action?: Maybe<PageBlocksComparisonTableActionMutation>;
};

export type PageBlocksFeatureFeaturesMutation = {
  icon?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
};

export type PageBlocksFeatureOverlayMutation = {
  image?: Maybe<Scalars['String']>;
  overlayColor?: Maybe<Scalars['String']>;
  overlayOpacity?: Maybe<Scalars['String']>;
};

export type PageBlocksFeatureMutation = {
  title?: Maybe<Scalars['String']>;
  subTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  featureStyle?: Maybe<Scalars['String']>;
  features?: Maybe<Array<Maybe<PageBlocksFeatureFeaturesMutation>>>;
  overlay?: Maybe<PageBlocksFeatureOverlayMutation>;
};

export type PageBlocksFullScreenLogoOverlayMutation = {
  image?: Maybe<Scalars['String']>;
  overlayColor?: Maybe<Scalars['String']>;
  overlayOpacity?: Maybe<Scalars['String']>;
};

export type PageBlocksFullScreenLogoMutation = {
  slogan?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  overlay?: Maybe<PageBlocksFullScreenLogoOverlayMutation>;
};

export type PageBlocksFullScreenHeaderActionMutation = {
  callToAction?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  linkOverride?: Maybe<Scalars['String']>;
  secondaryText?: Maybe<Scalars['String']>;
  secondaryLink?: Maybe<Scalars['String']>;
  secondaryLinkOverride?: Maybe<Scalars['String']>;
};

export type PageBlocksFullScreenHeaderOverlayMutation = {
  image?: Maybe<Scalars['String']>;
  overlayColor?: Maybe<Scalars['String']>;
  overlayOpacity?: Maybe<Scalars['String']>;
};

export type PageBlocksFullScreenHeaderMutation = {
  title?: Maybe<Scalars['String']>;
  subTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  action?: Maybe<PageBlocksFullScreenHeaderActionMutation>;
  overlay?: Maybe<PageBlocksFullScreenHeaderOverlayMutation>;
};

export type PageBlocksMutation = {
  news?: Maybe<PageBlocksNewsMutation>;
  statsWithImage?: Maybe<PageBlocksStatsWithImageMutation>;
  hero?: Maybe<PageBlocksHeroMutation>;
  slideshow?: Maybe<PageBlocksSlideshowMutation>;
  comparisonTable?: Maybe<PageBlocksComparisonTableMutation>;
  feature?: Maybe<PageBlocksFeatureMutation>;
  fullScreenLogo?: Maybe<PageBlocksFullScreenLogoMutation>;
  fullScreenHeader?: Maybe<PageBlocksFullScreenHeaderMutation>;
};

export type PageMutation = {
  title?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  seo?: Maybe<PageSeoMutation>;
  blocks?: Maybe<Array<Maybe<PageBlocksMutation>>>;
};

export type LocaleInfoPartsFragment = { __typename?: 'LocaleInfo', au?: Maybe<{ __typename: 'LocaleInfoAu', tel?: Maybe<string>, signUpLink?: Maybe<string>, signUpLinkPersonal?: Maybe<string>, signInLink?: Maybe<string> }>, us?: Maybe<{ __typename: 'LocaleInfoUs', tel?: Maybe<string>, signUpLink?: Maybe<string>, signUpLinkPersonal?: Maybe<string>, signInLink?: Maybe<string> }>, gb?: Maybe<{ __typename: 'LocaleInfoGb', tel?: Maybe<string>, signUpLink?: Maybe<string>, signUpLinkPersonal?: Maybe<string>, signInLink?: Maybe<string> }> };

export type NewsPartsFragment = { __typename?: 'News', title: string, subTitle?: Maybe<string>, image?: Maybe<string>, publishDate?: Maybe<string>, category?: Maybe<string>, body?: Maybe<any> };

export type FooterPartsFragment = { __typename?: 'Footer', offices?: Maybe<Array<Maybe<{ __typename: 'FooterOffices', location: string, address: string, phone: string }>>>, disclaimers: Array<{ __typename: 'FooterDisclaimers', body?: Maybe<any> }> };

export type ThemePartsFragment = { __typename?: 'Theme', displayFont?: Maybe<string>, colorMode?: Maybe<string> };

export type NavigationPartsFragment = { __typename?: 'Navigation', items: Array<{ __typename: 'NavigationItems', page?: Maybe<{ __typename?: 'Page', id: string }> }> };

export type PagePartsFragment = { __typename?: 'Page', title: string, link: string, seo?: Maybe<{ __typename: 'PageSeo', title?: Maybe<string>, image?: Maybe<string>, description: string }>, blocks?: Maybe<Array<Maybe<{ __typename: 'PageBlocksNews', title: string, subTitle?: Maybe<string>, description: any, newsItems: Array<{ __typename: 'PageBlocksNewsNewsItems', article: { __typename?: 'News', id: string } }> } | { __typename: 'PageBlocksStatsWithImage', title: string, subTitle?: Maybe<string>, description: any, image?: Maybe<string>, stats?: Maybe<Array<Maybe<{ __typename: 'PageBlocksStatsWithImageStats', title: string, subTitle?: Maybe<string>, description: any }>>> } | { __typename: 'PageBlocksHero', title: string, subTitle?: Maybe<string>, description: any, image?: Maybe<string>, action?: Maybe<{ __typename: 'PageBlocksHeroAction', callToAction?: Maybe<string>, linkText?: Maybe<string>, link?: Maybe<string>, linkOverride?: Maybe<string>, secondaryText?: Maybe<string>, secondaryLink?: Maybe<string>, secondaryLinkOverride?: Maybe<string> }> } | { __typename: 'PageBlocksSlideshow', items?: Maybe<Array<Maybe<{ __typename: 'PageBlocksSlideshowItems', title: string, subTitle?: Maybe<string>, description: any, action?: Maybe<{ __typename: 'PageBlocksSlideshowItemsAction', callToAction?: Maybe<string>, linkText?: Maybe<string>, link?: Maybe<string>, linkOverride?: Maybe<string>, secondaryText?: Maybe<string>, secondaryLink?: Maybe<string>, secondaryLinkOverride?: Maybe<string> }>, overlay?: Maybe<{ __typename: 'PageBlocksSlideshowItemsOverlay', image?: Maybe<string>, overlayColor?: Maybe<string>, overlayOpacity?: Maybe<string> }> }>>> } | { __typename: 'PageBlocksComparisonTable', title: string, subTitle?: Maybe<string>, description: any, items?: Maybe<Array<Maybe<{ __typename: 'PageBlocksComparisonTableItems', title: string, subTitle?: Maybe<string>, description: any, bulletPoints?: Maybe<Array<Maybe<string>>>, meta?: Maybe<Array<Maybe<{ __typename: 'PageBlocksComparisonTableItemsMetaA', aOne?: Maybe<string> } | { __typename: 'PageBlocksComparisonTableItemsMetaB', bOne?: Maybe<string> }>>> }>>>, action?: Maybe<{ __typename: 'PageBlocksComparisonTableAction', callToAction?: Maybe<string>, linkText?: Maybe<string>, link?: Maybe<string>, linkOverride?: Maybe<string>, secondaryText?: Maybe<string>, secondaryLink?: Maybe<string>, secondaryLinkOverride?: Maybe<string> }> } | { __typename: 'PageBlocksFeature', title: string, subTitle?: Maybe<string>, description: any, featureStyle?: Maybe<string>, features: Array<{ __typename: 'PageBlocksFeatureFeatures', icon: string, name: string, description: any }>, overlay?: Maybe<{ __typename: 'PageBlocksFeatureOverlay', image?: Maybe<string>, overlayColor?: Maybe<string>, overlayOpacity?: Maybe<string> }> } | { __typename: 'PageBlocksFullScreenLogo', slogan?: Maybe<string>, link?: Maybe<string>, overlay?: Maybe<{ __typename: 'PageBlocksFullScreenLogoOverlay', image?: Maybe<string>, overlayColor?: Maybe<string>, overlayOpacity?: Maybe<string> }> } | { __typename: 'PageBlocksFullScreenHeader', title: string, subTitle?: Maybe<string>, description: any, action?: Maybe<{ __typename: 'PageBlocksFullScreenHeaderAction', callToAction?: Maybe<string>, linkText?: Maybe<string>, link?: Maybe<string>, linkOverride?: Maybe<string>, secondaryText?: Maybe<string>, secondaryLink?: Maybe<string>, secondaryLinkOverride?: Maybe<string> }>, overlay?: Maybe<{ __typename: 'PageBlocksFullScreenHeaderOverlay', image?: Maybe<string>, overlayColor?: Maybe<string>, overlayOpacity?: Maybe<string> }> }>>> };

export type LocaleInfoQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type LocaleInfoQuery = { __typename?: 'Query', localeInfo: { __typename?: 'LocaleInfo', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, au?: Maybe<{ __typename: 'LocaleInfoAu', tel?: Maybe<string>, signUpLink?: Maybe<string>, signUpLinkPersonal?: Maybe<string>, signInLink?: Maybe<string> }>, us?: Maybe<{ __typename: 'LocaleInfoUs', tel?: Maybe<string>, signUpLink?: Maybe<string>, signUpLinkPersonal?: Maybe<string>, signInLink?: Maybe<string> }>, gb?: Maybe<{ __typename: 'LocaleInfoGb', tel?: Maybe<string>, signUpLink?: Maybe<string>, signUpLinkPersonal?: Maybe<string>, signInLink?: Maybe<string> }> } };

export type LocaleInfoConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type LocaleInfoConnectionQuery = { __typename?: 'Query', localeInfoConnection: { __typename?: 'LocaleInfoConnection', totalCount: number, edges?: Maybe<Array<Maybe<{ __typename?: 'LocaleInfoConnectionEdges', node?: Maybe<{ __typename?: 'LocaleInfo', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, au?: Maybe<{ __typename: 'LocaleInfoAu', tel?: Maybe<string>, signUpLink?: Maybe<string>, signUpLinkPersonal?: Maybe<string>, signInLink?: Maybe<string> }>, us?: Maybe<{ __typename: 'LocaleInfoUs', tel?: Maybe<string>, signUpLink?: Maybe<string>, signUpLinkPersonal?: Maybe<string>, signInLink?: Maybe<string> }>, gb?: Maybe<{ __typename: 'LocaleInfoGb', tel?: Maybe<string>, signUpLink?: Maybe<string>, signUpLinkPersonal?: Maybe<string>, signInLink?: Maybe<string> }> }> }>>> } };

export type NewsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type NewsQuery = { __typename?: 'Query', news: { __typename?: 'News', id: string, title: string, subTitle?: Maybe<string>, image?: Maybe<string>, publishDate?: Maybe<string>, category?: Maybe<string>, body?: Maybe<any>, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type NewsConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type NewsConnectionQuery = { __typename?: 'Query', newsConnection: { __typename?: 'NewsConnection', totalCount: number, edges?: Maybe<Array<Maybe<{ __typename?: 'NewsConnectionEdges', node?: Maybe<{ __typename?: 'News', id: string, title: string, subTitle?: Maybe<string>, image?: Maybe<string>, publishDate?: Maybe<string>, category?: Maybe<string>, body?: Maybe<any>, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } }> }>>> } };

export type FooterQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type FooterQuery = { __typename?: 'Query', footer: { __typename?: 'Footer', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, offices?: Maybe<Array<Maybe<{ __typename: 'FooterOffices', location: string, address: string, phone: string }>>>, disclaimers: Array<{ __typename: 'FooterDisclaimers', body?: Maybe<any> }> } };

export type FooterConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type FooterConnectionQuery = { __typename?: 'Query', footerConnection: { __typename?: 'FooterConnection', totalCount: number, edges?: Maybe<Array<Maybe<{ __typename?: 'FooterConnectionEdges', node?: Maybe<{ __typename?: 'Footer', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, offices?: Maybe<Array<Maybe<{ __typename: 'FooterOffices', location: string, address: string, phone: string }>>>, disclaimers: Array<{ __typename: 'FooterDisclaimers', body?: Maybe<any> }> }> }>>> } };

export type ThemeQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ThemeQuery = { __typename?: 'Query', theme: { __typename?: 'Theme', id: string, displayFont?: Maybe<string>, colorMode?: Maybe<string>, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ThemeConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type ThemeConnectionQuery = { __typename?: 'Query', themeConnection: { __typename?: 'ThemeConnection', totalCount: number, edges?: Maybe<Array<Maybe<{ __typename?: 'ThemeConnectionEdges', node?: Maybe<{ __typename?: 'Theme', id: string, displayFont?: Maybe<string>, colorMode?: Maybe<string>, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } }> }>>> } };

export type NavigationQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type NavigationQuery = { __typename?: 'Query', navigation: { __typename?: 'Navigation', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, items: Array<{ __typename: 'NavigationItems', page?: Maybe<{ __typename?: 'Page', id: string }> }> } };

export type NavigationConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type NavigationConnectionQuery = { __typename?: 'Query', navigationConnection: { __typename?: 'NavigationConnection', totalCount: number, edges?: Maybe<Array<Maybe<{ __typename?: 'NavigationConnectionEdges', node?: Maybe<{ __typename?: 'Navigation', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, items: Array<{ __typename: 'NavigationItems', page?: Maybe<{ __typename?: 'Page', id: string }> }> }> }>>> } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename?: 'Page', id: string, title: string, link: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: Maybe<{ __typename: 'PageSeo', title?: Maybe<string>, image?: Maybe<string>, description: string }>, blocks?: Maybe<Array<Maybe<{ __typename: 'PageBlocksNews', title: string, subTitle?: Maybe<string>, description: any, newsItems: Array<{ __typename: 'PageBlocksNewsNewsItems', article: { __typename?: 'News', id: string } }> } | { __typename: 'PageBlocksStatsWithImage', title: string, subTitle?: Maybe<string>, description: any, image?: Maybe<string>, stats?: Maybe<Array<Maybe<{ __typename: 'PageBlocksStatsWithImageStats', title: string, subTitle?: Maybe<string>, description: any }>>> } | { __typename: 'PageBlocksHero', title: string, subTitle?: Maybe<string>, description: any, image?: Maybe<string>, action?: Maybe<{ __typename: 'PageBlocksHeroAction', callToAction?: Maybe<string>, linkText?: Maybe<string>, link?: Maybe<string>, linkOverride?: Maybe<string>, secondaryText?: Maybe<string>, secondaryLink?: Maybe<string>, secondaryLinkOverride?: Maybe<string> }> } | { __typename: 'PageBlocksSlideshow', items?: Maybe<Array<Maybe<{ __typename: 'PageBlocksSlideshowItems', title: string, subTitle?: Maybe<string>, description: any, action?: Maybe<{ __typename: 'PageBlocksSlideshowItemsAction', callToAction?: Maybe<string>, linkText?: Maybe<string>, link?: Maybe<string>, linkOverride?: Maybe<string>, secondaryText?: Maybe<string>, secondaryLink?: Maybe<string>, secondaryLinkOverride?: Maybe<string> }>, overlay?: Maybe<{ __typename: 'PageBlocksSlideshowItemsOverlay', image?: Maybe<string>, overlayColor?: Maybe<string>, overlayOpacity?: Maybe<string> }> }>>> } | { __typename: 'PageBlocksComparisonTable', title: string, subTitle?: Maybe<string>, description: any, items?: Maybe<Array<Maybe<{ __typename: 'PageBlocksComparisonTableItems', title: string, subTitle?: Maybe<string>, description: any, bulletPoints?: Maybe<Array<Maybe<string>>>, meta?: Maybe<Array<Maybe<{ __typename: 'PageBlocksComparisonTableItemsMetaA', aOne?: Maybe<string> } | { __typename: 'PageBlocksComparisonTableItemsMetaB', bOne?: Maybe<string> }>>> }>>>, action?: Maybe<{ __typename: 'PageBlocksComparisonTableAction', callToAction?: Maybe<string>, linkText?: Maybe<string>, link?: Maybe<string>, linkOverride?: Maybe<string>, secondaryText?: Maybe<string>, secondaryLink?: Maybe<string>, secondaryLinkOverride?: Maybe<string> }> } | { __typename: 'PageBlocksFeature', title: string, subTitle?: Maybe<string>, description: any, featureStyle?: Maybe<string>, features: Array<{ __typename: 'PageBlocksFeatureFeatures', icon: string, name: string, description: any }>, overlay?: Maybe<{ __typename: 'PageBlocksFeatureOverlay', image?: Maybe<string>, overlayColor?: Maybe<string>, overlayOpacity?: Maybe<string> }> } | { __typename: 'PageBlocksFullScreenLogo', slogan?: Maybe<string>, link?: Maybe<string>, overlay?: Maybe<{ __typename: 'PageBlocksFullScreenLogoOverlay', image?: Maybe<string>, overlayColor?: Maybe<string>, overlayOpacity?: Maybe<string> }> } | { __typename: 'PageBlocksFullScreenHeader', title: string, subTitle?: Maybe<string>, description: any, action?: Maybe<{ __typename: 'PageBlocksFullScreenHeaderAction', callToAction?: Maybe<string>, linkText?: Maybe<string>, link?: Maybe<string>, linkOverride?: Maybe<string>, secondaryText?: Maybe<string>, secondaryLink?: Maybe<string>, secondaryLinkOverride?: Maybe<string> }>, overlay?: Maybe<{ __typename: 'PageBlocksFullScreenHeaderOverlay', image?: Maybe<string>, overlayColor?: Maybe<string>, overlayOpacity?: Maybe<string> }> }>>> } };

export type PageConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, edges?: Maybe<Array<Maybe<{ __typename?: 'PageConnectionEdges', node?: Maybe<{ __typename?: 'Page', id: string, title: string, link: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: Maybe<{ __typename: 'PageSeo', title?: Maybe<string>, image?: Maybe<string>, description: string }>, blocks?: Maybe<Array<Maybe<{ __typename: 'PageBlocksNews', title: string, subTitle?: Maybe<string>, description: any, newsItems: Array<{ __typename: 'PageBlocksNewsNewsItems', article: { __typename?: 'News', id: string } }> } | { __typename: 'PageBlocksStatsWithImage', title: string, subTitle?: Maybe<string>, description: any, image?: Maybe<string>, stats?: Maybe<Array<Maybe<{ __typename: 'PageBlocksStatsWithImageStats', title: string, subTitle?: Maybe<string>, description: any }>>> } | { __typename: 'PageBlocksHero', title: string, subTitle?: Maybe<string>, description: any, image?: Maybe<string>, action?: Maybe<{ __typename: 'PageBlocksHeroAction', callToAction?: Maybe<string>, linkText?: Maybe<string>, link?: Maybe<string>, linkOverride?: Maybe<string>, secondaryText?: Maybe<string>, secondaryLink?: Maybe<string>, secondaryLinkOverride?: Maybe<string> }> } | { __typename: 'PageBlocksSlideshow', items?: Maybe<Array<Maybe<{ __typename: 'PageBlocksSlideshowItems', title: string, subTitle?: Maybe<string>, description: any, action?: Maybe<{ __typename: 'PageBlocksSlideshowItemsAction', callToAction?: Maybe<string>, linkText?: Maybe<string>, link?: Maybe<string>, linkOverride?: Maybe<string>, secondaryText?: Maybe<string>, secondaryLink?: Maybe<string>, secondaryLinkOverride?: Maybe<string> }>, overlay?: Maybe<{ __typename: 'PageBlocksSlideshowItemsOverlay', image?: Maybe<string>, overlayColor?: Maybe<string>, overlayOpacity?: Maybe<string> }> }>>> } | { __typename: 'PageBlocksComparisonTable', title: string, subTitle?: Maybe<string>, description: any, items?: Maybe<Array<Maybe<{ __typename: 'PageBlocksComparisonTableItems', title: string, subTitle?: Maybe<string>, description: any, bulletPoints?: Maybe<Array<Maybe<string>>>, meta?: Maybe<Array<Maybe<{ __typename: 'PageBlocksComparisonTableItemsMetaA', aOne?: Maybe<string> } | { __typename: 'PageBlocksComparisonTableItemsMetaB', bOne?: Maybe<string> }>>> }>>>, action?: Maybe<{ __typename: 'PageBlocksComparisonTableAction', callToAction?: Maybe<string>, linkText?: Maybe<string>, link?: Maybe<string>, linkOverride?: Maybe<string>, secondaryText?: Maybe<string>, secondaryLink?: Maybe<string>, secondaryLinkOverride?: Maybe<string> }> } | { __typename: 'PageBlocksFeature', title: string, subTitle?: Maybe<string>, description: any, featureStyle?: Maybe<string>, features: Array<{ __typename: 'PageBlocksFeatureFeatures', icon: string, name: string, description: any }>, overlay?: Maybe<{ __typename: 'PageBlocksFeatureOverlay', image?: Maybe<string>, overlayColor?: Maybe<string>, overlayOpacity?: Maybe<string> }> } | { __typename: 'PageBlocksFullScreenLogo', slogan?: Maybe<string>, link?: Maybe<string>, overlay?: Maybe<{ __typename: 'PageBlocksFullScreenLogoOverlay', image?: Maybe<string>, overlayColor?: Maybe<string>, overlayOpacity?: Maybe<string> }> } | { __typename: 'PageBlocksFullScreenHeader', title: string, subTitle?: Maybe<string>, description: any, action?: Maybe<{ __typename: 'PageBlocksFullScreenHeaderAction', callToAction?: Maybe<string>, linkText?: Maybe<string>, link?: Maybe<string>, linkOverride?: Maybe<string>, secondaryText?: Maybe<string>, secondaryLink?: Maybe<string>, secondaryLinkOverride?: Maybe<string> }>, overlay?: Maybe<{ __typename: 'PageBlocksFullScreenHeaderOverlay', image?: Maybe<string>, overlayColor?: Maybe<string>, overlayOpacity?: Maybe<string> }> }>>> }> }>>> } };

export const LocaleInfoPartsFragmentDoc = gql`
    fragment LocaleInfoParts on LocaleInfo {
  au {
    __typename
    tel
    signUpLink
    signUpLinkPersonal
    signInLink
  }
  us {
    __typename
    tel
    signUpLink
    signUpLinkPersonal
    signInLink
  }
  gb {
    __typename
    tel
    signUpLink
    signUpLinkPersonal
    signInLink
  }
}
    `;
export const NewsPartsFragmentDoc = gql`
    fragment NewsParts on News {
  title
  subTitle
  image
  publishDate
  category
  body
}
    `;
export const FooterPartsFragmentDoc = gql`
    fragment FooterParts on Footer {
  offices {
    __typename
    location
    address
    phone
  }
  disclaimers {
    __typename
    body
  }
}
    `;
export const ThemePartsFragmentDoc = gql`
    fragment ThemeParts on Theme {
  displayFont
  colorMode
}
    `;
export const NavigationPartsFragmentDoc = gql`
    fragment NavigationParts on Navigation {
  items {
    __typename
    page {
      ... on Document {
        id
      }
    }
  }
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  title
  link
  seo {
    __typename
    title
    image
    description
  }
  blocks {
    __typename
    ... on PageBlocksNews {
      title
      subTitle
      description
      newsItems {
        __typename
        article {
          ... on Document {
            id
          }
        }
      }
    }
    ... on PageBlocksStatsWithImage {
      title
      subTitle
      description
      image
      stats {
        __typename
        title
        subTitle
        description
      }
    }
    ... on PageBlocksHero {
      title
      subTitle
      description
      image
      action {
        __typename
        callToAction
        linkText
        link
        linkOverride
        secondaryText
        secondaryLink
        secondaryLinkOverride
      }
    }
    ... on PageBlocksSlideshow {
      items {
        __typename
        title
        subTitle
        description
        action {
          __typename
          callToAction
          linkText
          link
          linkOverride
          secondaryText
          secondaryLink
          secondaryLinkOverride
        }
        overlay {
          __typename
          image
          overlayColor
          overlayOpacity
        }
      }
    }
    ... on PageBlocksComparisonTable {
      title
      subTitle
      description
      items {
        __typename
        title
        subTitle
        description
        bulletPoints
        meta {
          __typename
          ... on PageBlocksComparisonTableItemsMetaA {
            aOne
          }
          ... on PageBlocksComparisonTableItemsMetaB {
            bOne
          }
        }
      }
      action {
        __typename
        callToAction
        linkText
        link
        linkOverride
        secondaryText
        secondaryLink
        secondaryLinkOverride
      }
    }
    ... on PageBlocksFeature {
      title
      subTitle
      description
      featureStyle
      features {
        __typename
        icon
        name
        description
      }
      overlay {
        __typename
        image
        overlayColor
        overlayOpacity
      }
    }
    ... on PageBlocksFullScreenLogo {
      slogan
      link
      overlay {
        __typename
        image
        overlayColor
        overlayOpacity
      }
    }
    ... on PageBlocksFullScreenHeader {
      title
      subTitle
      description
      action {
        __typename
        callToAction
        linkText
        link
        linkOverride
        secondaryText
        secondaryLink
        secondaryLinkOverride
      }
      overlay {
        __typename
        image
        overlayColor
        overlayOpacity
      }
    }
  }
}
    `;
export const LocaleInfoDocument = gql`
    query localeInfo($relativePath: String!) {
  localeInfo(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...LocaleInfoParts
  }
}
    ${LocaleInfoPartsFragmentDoc}`;
export const LocaleInfoConnectionDocument = gql`
    query localeInfoConnection {
  localeInfoConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...LocaleInfoParts
      }
    }
  }
}
    ${LocaleInfoPartsFragmentDoc}`;
export const NewsDocument = gql`
    query news($relativePath: String!) {
  news(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...NewsParts
  }
}
    ${NewsPartsFragmentDoc}`;
export const NewsConnectionDocument = gql`
    query newsConnection {
  newsConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...NewsParts
      }
    }
  }
}
    ${NewsPartsFragmentDoc}`;
export const FooterDocument = gql`
    query footer($relativePath: String!) {
  footer(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...FooterParts
  }
}
    ${FooterPartsFragmentDoc}`;
export const FooterConnectionDocument = gql`
    query footerConnection {
  footerConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...FooterParts
      }
    }
  }
}
    ${FooterPartsFragmentDoc}`;
export const ThemeDocument = gql`
    query theme($relativePath: String!) {
  theme(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...ThemeParts
  }
}
    ${ThemePartsFragmentDoc}`;
export const ThemeConnectionDocument = gql`
    query themeConnection {
  themeConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...ThemeParts
      }
    }
  }
}
    ${ThemePartsFragmentDoc}`;
export const NavigationDocument = gql`
    query navigation($relativePath: String!) {
  navigation(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...NavigationParts
  }
}
    ${NavigationPartsFragmentDoc}`;
export const NavigationConnectionDocument = gql`
    query navigationConnection {
  navigationConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...NavigationParts
      }
    }
  }
}
    ${NavigationPartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection {
  pageConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      localeInfo(variables: LocaleInfoQueryVariables, options?: C): Promise<{data: LocaleInfoQuery, variables: LocaleInfoQueryVariables, query: string}> {
        return requester<{data: LocaleInfoQuery, variables: LocaleInfoQueryVariables, query: string}, LocaleInfoQueryVariables>(LocaleInfoDocument, variables, options);
      },
    localeInfoConnection(variables?: LocaleInfoConnectionQueryVariables, options?: C): Promise<{data: LocaleInfoConnectionQuery, variables: LocaleInfoConnectionQueryVariables, query: string}> {
        return requester<{data: LocaleInfoConnectionQuery, variables: LocaleInfoConnectionQueryVariables, query: string}, LocaleInfoConnectionQueryVariables>(LocaleInfoConnectionDocument, variables, options);
      },
    news(variables: NewsQueryVariables, options?: C): Promise<{data: NewsQuery, variables: NewsQueryVariables, query: string}> {
        return requester<{data: NewsQuery, variables: NewsQueryVariables, query: string}, NewsQueryVariables>(NewsDocument, variables, options);
      },
    newsConnection(variables?: NewsConnectionQueryVariables, options?: C): Promise<{data: NewsConnectionQuery, variables: NewsConnectionQueryVariables, query: string}> {
        return requester<{data: NewsConnectionQuery, variables: NewsConnectionQueryVariables, query: string}, NewsConnectionQueryVariables>(NewsConnectionDocument, variables, options);
      },
    footer(variables: FooterQueryVariables, options?: C): Promise<{data: FooterQuery, variables: FooterQueryVariables, query: string}> {
        return requester<{data: FooterQuery, variables: FooterQueryVariables, query: string}, FooterQueryVariables>(FooterDocument, variables, options);
      },
    footerConnection(variables?: FooterConnectionQueryVariables, options?: C): Promise<{data: FooterConnectionQuery, variables: FooterConnectionQueryVariables, query: string}> {
        return requester<{data: FooterConnectionQuery, variables: FooterConnectionQueryVariables, query: string}, FooterConnectionQueryVariables>(FooterConnectionDocument, variables, options);
      },
    theme(variables: ThemeQueryVariables, options?: C): Promise<{data: ThemeQuery, variables: ThemeQueryVariables, query: string}> {
        return requester<{data: ThemeQuery, variables: ThemeQueryVariables, query: string}, ThemeQueryVariables>(ThemeDocument, variables, options);
      },
    themeConnection(variables?: ThemeConnectionQueryVariables, options?: C): Promise<{data: ThemeConnectionQuery, variables: ThemeConnectionQueryVariables, query: string}> {
        return requester<{data: ThemeConnectionQuery, variables: ThemeConnectionQueryVariables, query: string}, ThemeConnectionQueryVariables>(ThemeConnectionDocument, variables, options);
      },
    navigation(variables: NavigationQueryVariables, options?: C): Promise<{data: NavigationQuery, variables: NavigationQueryVariables, query: string}> {
        return requester<{data: NavigationQuery, variables: NavigationQueryVariables, query: string}, NavigationQueryVariables>(NavigationDocument, variables, options);
      },
    navigationConnection(variables?: NavigationConnectionQueryVariables, options?: C): Promise<{data: NavigationConnectionQuery, variables: NavigationConnectionQueryVariables, query: string}> {
        return requester<{data: NavigationConnectionQuery, variables: NavigationConnectionQueryVariables, query: string}, NavigationConnectionQueryVariables>(NavigationConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { staticRequest } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {}
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    })
  } catch (e) {
    // swallow errors related to document creation
    console.warn('Warning: There was an error when fetching data')
    console.warn(e)
  }

  return { data, query: doc, variables: vars || {} }
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)

