# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  documentConnection(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
  posts(relativePath: String): Posts!
  postsConnection(before: String, after: String, first: Float, last: Float, sort: String): PostsConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String): GlobalConnection!
  authors(relativePath: String): Authors!
  authorsConnection(before: String, after: String, first: Float, last: Float, sort: String): AuthorsConnection!
  zodiacs(relativePath: String): Zodiacs!
  zodiacsConnection(before: String, after: String, first: Float, last: Float, sort: String): ZodiacsConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String): PagesConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Posts | Global | Authors | Zodiacs | Pages

union PostsAuthor = Authors

type Posts implements Node & Document {
  _body: JSON
  title: String
  published: Boolean
  rating: Float
  author: PostsAuthor
  date: String
  heroImg: String
  excerpt: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostsConnectionEdges {
  cursor: String!
  node: Posts
}

type PostsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostsConnectionEdges]
}

type GlobalHeaderIcon {
  color: String
  style: String
  name: String
}

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeader {
  icon: GlobalHeaderIcon
  color: String
  nav: [GlobalHeaderNav]
}

type GlobalFooterSocial {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

type GlobalFooter {
  color: String
  social: GlobalFooterSocial
}

type GlobalTheme {
  color: String
  font: String
  icon: String
  darkMode: String
}

type Global implements Node & Document {
  header: GlobalHeader
  footer: GlobalFooter
  theme: GlobalTheme
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

union AuthorsDetailsZodiac = Zodiacs

type AuthorsDetails {
  zodiac: AuthorsDetailsZodiac
}

type Authors implements Node & Document {
  name: String
  avatar: String
  details: [AuthorsDetails]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type AuthorsConnectionEdges {
  cursor: String!
  node: Authors
}

type AuthorsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorsConnectionEdges]
}

type Zodiacs implements Node & Document {
  name: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type ZodiacsConnectionEdges {
  cursor: String!
  node: Zodiacs
}

type ZodiacsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ZodiacsConnectionEdges]
}

type PagesBlocksHeroActions {
  label: String
  type: String
  icon: Boolean
  link: String
}

type PagesBlocksHeroImage {
  src: String
  alt: String
}

type PagesBlocksHero {
  tagline: String
  headline: String
  text: String
  actions: [PagesBlocksHeroActions]
  image: PagesBlocksHeroImage
  color: String
}

type PagesBlocksFeaturesItemsIcon {
  color: String
  style: String
  name: String
}

type PagesBlocksFeaturesItems {
  icon: PagesBlocksFeaturesItemsIcon
  title: String
  text: String
}

type PagesBlocksFeatures {
  items: [PagesBlocksFeaturesItems]
  color: String
}

type PagesBlocksContent {
  body: String
  color: String
}

type PagesBlocksTestimonial {
  quote: String
  author: String
  color: String
}

union PagesBlocks = PagesBlocksHero | PagesBlocksFeatures | PagesBlocksContent | PagesBlocksTestimonial

type Pages implements Node & Document {
  blocks: [PagesBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePosts(relativePath: String!, params: PostsMutation!): Posts!
  createPosts(relativePath: String!, params: PostsMutation!): Posts!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updateAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  createAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  updateZodiacs(relativePath: String!, params: ZodiacsMutation!): Zodiacs!
  createZodiacs(relativePath: String!, params: ZodiacsMutation!): Zodiacs!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
}

input DocumentMutation {
  posts: PostsMutation
  global: GlobalMutation
  authors: AuthorsMutation
  zodiacs: ZodiacsMutation
  pages: PagesMutation
}

input PostsMutation {
  _body: JSON
  title: String
  published: Boolean
  rating: Float
  author: String
  date: String
  heroImg: String
  excerpt: String
}

input GlobalHeaderIconMutation {
  color: String
  style: String
  name: String
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderMutation {
  icon: GlobalHeaderIconMutation
  color: String
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterSocialMutation {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

input GlobalFooterMutation {
  color: String
  social: GlobalFooterSocialMutation
}

input GlobalThemeMutation {
  color: String
  font: String
  icon: String
  darkMode: String
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
  theme: GlobalThemeMutation
}

input AuthorsDetailsMutation {
  zodiac: String
}

input AuthorsMutation {
  name: String
  avatar: String
  details: [AuthorsDetailsMutation]
}

input ZodiacsMutation {
  name: String
}

input PagesBlocksHeroActionsMutation {
  label: String
  type: String
  icon: Boolean
  link: String
}

input PagesBlocksHeroImageMutation {
  src: String
  alt: String
}

input PagesBlocksHeroMutation {
  tagline: String
  headline: String
  text: String
  actions: [PagesBlocksHeroActionsMutation]
  image: PagesBlocksHeroImageMutation
  color: String
}

input PagesBlocksFeaturesItemsIconMutation {
  color: String
  style: String
  name: String
}

input PagesBlocksFeaturesItemsMutation {
  icon: PagesBlocksFeaturesItemsIconMutation
  title: String
  text: String
}

input PagesBlocksFeaturesMutation {
  items: [PagesBlocksFeaturesItemsMutation]
  color: String
}

input PagesBlocksContentMutation {
  body: String
  color: String
}

input PagesBlocksTestimonialMutation {
  quote: String
  author: String
  color: String
}

input PagesBlocksMutation {
  hero: PagesBlocksHeroMutation
  features: PagesBlocksFeaturesMutation
  content: PagesBlocksContentMutation
  testimonial: PagesBlocksTestimonialMutation
}

input PagesMutation {
  blocks: [PagesBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  